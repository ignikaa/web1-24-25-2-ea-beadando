import { useState, useEffect } from 'react';
import './MemoryGame.css';

// K√°rty√°k k√©pei (egyszer≈± emoji-k)
const cardImages = [
  { src: 'üê∂', matched: false },
  { src: 'üê±', matched: false },
  { src: 'üê≠', matched: false },
  { src: 'üêπ', matched: false },
  { src: 'üê∞', matched: false },
  { src: 'ü¶ä', matched: false },
  { src: 'üêª', matched: false },
  { src: 'üêº', matched: false }
];

function MemoryGame() {
  const [cards, setCards] = useState([]);
  const [turns, setTurns] = useState(0);
  const [choiceOne, setChoiceOne] = useState(null);
  const [choiceTwo, setChoiceTwo] = useState(null);
  const [disabled, setDisabled] = useState(false);
  const [gameWon, setGameWon] = useState(false);
  const [lives, setLives] = useState(20);
  const [gameOver, setGameOver] = useState(false);
  const [level, setLevel] = useState(1);
  const [maxLives, setMaxLives] = useState(20);

  // K√°rty√°k kever√©se √©s j√°t√©k ind√≠t√°sa
  const shuffleCards = () => {
    // Duplik√°ljuk a k√°rty√°kat, hogy p√°rokat kapjunk
    const shuffledCards = [...cardImages, ...cardImages]
      // Keverj√ºk meg a k√°rty√°kat
      .sort(() => Math.random() - 0.5)
      // Adjunk hozz√° egyedi ID-kat
      .map((card, index) => ({ ...card, id: index, matched: false }));
    
    setChoiceOne(null);
    setChoiceTwo(null);
    setCards(shuffledCards);
    setTurns(0);
    setGameWon(false);
    setLives(maxLives);
    setGameOver(false);
  };

  // K√∂vetkez≈ë szint ind√≠t√°sa
  const nextLevel = () => {
    setLevel(prevLevel => prevLevel + 1);
    // Minden szinten cs√∂kkentj√ºk a maxim√°lis √©letek sz√°m√°t
    setMaxLives(prevMaxLives => Math.max(3, prevMaxLives - 1));
    shuffleCards();
  };

  // K√°rtya kiv√°laszt√°sa
  const handleChoice = (card) => {
    // Ellen≈ërizz√ºk, hogy ne lehessen ugyanazt a k√°rty√°t k√©tszer v√°lasztani
    if (card.id === choiceOne?.id) return;
    
    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);
  };

  // Ellen≈ërizz√ºk, hogy nyert-e a j√°t√©kos
  useEffect(() => {
    if (cards.length > 0 && cards.every(card => card.matched)) {
      setGameWon(true);
    }
  }, [cards]);

  // √ñsszehasonl√≠tjuk a k√©t kiv√°lasztott k√°rty√°t
  useEffect(() => {
    if (choiceOne && choiceTwo) {
      setDisabled(true);
      
      if (choiceOne.src === choiceTwo.src) {
        // Ha egyeznek, jel√∂lj√ºk meg ≈ëket
        setCards(prevCards => {
          return prevCards.map(card => {
            if (card.src === choiceOne.src) {
              return { ...card, matched: true };
            } else {
              return card;
            }
          });
        });
        resetTurn();
      } else {
        // Ha nem egyeznek, ford√≠tsuk vissza ≈ëket √©s cs√∂kkents√ºk az √©letek sz√°m√°t
        setTimeout(() => {
          resetTurn();
          setLives(prevLives => {
            const newLives = prevLives - 1;
            if (newLives === 0) {
              setGameOver(true);
            }
            return newLives;
          });
        }, 1000);
      }
    }
  }, [choiceOne, choiceTwo]);

  // Fordul√≥ vissza√°ll√≠t√°sa
  const resetTurn = () => {
    setChoiceOne(null);
    setChoiceTwo(null);
    setTurns(prevTurns => prevTurns + 1);
    setDisabled(false);
  };

  // Automatikusan ind√≠tsuk el a j√°t√©kot bet√∂lt√©skor
  useEffect(() => {
    shuffleCards();
  }, []);

  return (
    <div className="memory-game">
      <h2>Mem√≥ria J√°t√©k</h2>
      
      <div className="game-info">
        <div className="stats">
          <div className="level">Szint: {level}</div>
          <div className="turns">L√©p√©sek: {turns}</div>
          <div className="lives">√âletek: {lives}</div>
        </div>
        <button onClick={shuffleCards}>√öjrakezd√©s</button>
      </div>
      
      {gameWon && (
        <div className="game-message game-won">
          <h3>Gratul√°lunk! Teljes√≠tetted a {level}. szintet!</h3>
          <p>√ñsszes l√©p√©s: {turns}</p>
          <p>Megmaradt √©letek: {lives}</p>
          <button onClick={nextLevel}>K√∂vetkez≈ë szint</button>
          <button onClick={shuffleCards}>√öjrakezd√©s</button>
        </div>
      )}
      
      {gameOver && !gameWon && (
        <div className="game-message game-over">
          <h3>J√°t√©k v√©ge!</h3>
          <p>Elfogytak az √©letek a {level}. szinten.</p>
          <button onClick={shuffleCards}>√öjrakezd√©s</button>
        </div>
      )}
      
      <div className="card-grid">
        {cards.map(card => (
          <div 
            className={`card ${card.matched ? 'matched' : ''} ${choiceOne?.id === card.id || choiceTwo?.id === card.id || card.matched ? 'flipped' : ''}`} 
            key={card.id}
            onClick={() => !disabled && !card.matched && !gameOver && handleChoice(card)}
          >
            <div className="card-front">{card.src}</div>
            <div className="card-back"></div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default MemoryGame;
